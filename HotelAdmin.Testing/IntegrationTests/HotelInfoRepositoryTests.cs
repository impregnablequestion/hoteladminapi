// these tests were generated by ChatGPT 3.5 with a prompt of the interface for the Hotel Repository

// I had to do some tidying up and debugging, including filling in proper constructers for Hotels 
// and rooms where they were being instantiated, but the file is mostly unchanged

// Debug also â€” sometimes there was issues with the code not calling SaveChangesAsync() on the repository,
// leading to Assertions failing because the data hadn't persisted

// Also funny little issue with ChatGPT calling AssertNull on results that were empty enumerables

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using HotelAdmin.API.DbContexts;
using HotelAdmin.API.Entities;
using HotelAdmin.API.Services;

namespace HotelAdmin.UnitTests.IntegrationTests;

public class HotelInfoRepositoryTests : IDisposable
{
    private readonly IHotelInfoRepository _repository;
    private readonly DbContextOptions<HotelContext> _options;

    public HotelInfoRepositoryTests()
    {
        var serviceProvider = new ServiceCollection()
            .AddEntityFrameworkInMemoryDatabase()
            .BuildServiceProvider();

        _options = new DbContextOptionsBuilder<HotelContext>()
            .UseInMemoryDatabase(Guid.NewGuid().ToString())
            .UseInternalServiceProvider(serviceProvider)
            .Options;

        _repository = new HotelInfoRepository(new HotelContext(_options));
    }

    public void Dispose()
    {
        using (var context = new HotelContext(_options))
        {
            context.Database.EnsureDeleted();
        }
    }

    [Fact]
    public async Task GetHotelsAsync_ReturnsAllHotels()
    {
        // Arrange
        var hotels = new List<Hotel>
        {
            new Hotel { 
                Id = 1, 
                Name = "Hotel A", 
                Address = "123 Fake Street", 
                Country = "Scotland", 
                Email = "hotelb@gmail.com", 
                PhoneNumber = "07317893721",
                Website = "www.hotel.com"
            },
            new Hotel { 
                Id = 2, 
                Name = "Hotel B", 
                Address = "123 Fake Street", 
                Country = "Scotland", 
                Email = "hotelb@gmail.com", 
                PhoneNumber = "07317893721",
                Website = "www.hotel.com"
            },
            new Hotel { 
                Id = 3, 
                Name = "Hotel C", 
                Address = "123 Fake Street", 
                Country = "Scotland", 
                Email = "hotelb@gmail.com", 
                PhoneNumber = "07317893721",
                Website = "www.hotel.com"
            },
        };

        using (var context = new HotelContext(_options))
        {
            await context.Hotels.AddRangeAsync(hotels);
            await context.SaveChangesAsync();
        }

        // Act
        var result = await _repository.GetHotelsAsync();

        // Assert
        Assert.Equal(hotels.Count, result.Count());
        Assert.Equal(hotels.Select(x => x.Id), result.Select(x => x.Id));
        Assert.Equal(hotels.Select(x => x.Name), result.Select(x => x.Name));
    }

    [Fact]
    public async Task GetHotelAsync_ReturnsHotelById()
    {
        // Arrange
        var hotel = new Hotel { 
            Id = 1, 
            Name = "Hotel A", 
            Address = "123 Fake Street", 
            Country = "Scotland", 
            Email = "hotelb@gmail.com", 
            PhoneNumber = "07317893721",
            Website = "www.hotel.com"
        };

        using (var context = new HotelContext(_options))
        {
            await context.Hotels.AddAsync(hotel);
            await context.SaveChangesAsync();
        }

        // Act
        var result = await _repository.GetHotelAsync(hotel.Id, false);

        // Assert
        Assert.NotNull(result);
        Assert.Equal(hotel.Id, result.Id);
        Assert.Equal(hotel.Name, result.Name);
    }

    [Fact]
    public async Task GetHotelAsync_ReturnsHotelByIdWithRooms()
    {
        // Arrange
        var hotel = new Hotel { 
            Id = 1, 
            Name = "Hotel A", 
            Address = "123 Fake Street", 
            Country = "Scotland", 
            Email = "hotelb@gmail.com", 
            PhoneNumber = "07317893721",
            Website = "www.hotel.com"
        };
        var rooms = new List<Room>
        {
            new Room { Id = 1, HotelId = hotel.Id, Capacity = 4, PricePerNight = 80.00m},
            new Room { Id = 2, HotelId = hotel.Id, Capacity = 5, PricePerNight = 90.00m}
        };

        using (var context = new HotelContext(_options))
        {
            await context.Hotels.AddAsync(hotel);
            await context.Rooms.AddRangeAsync(rooms);
            await context.SaveChangesAsync();
        }

        // Act
        var result = await _repository.GetHotelAsync(hotel.Id, true);

        // Assert
        Assert.NotNull(result);
        Assert.Equal(hotel.Id, result.Id);
        Assert.Equal(hotel.Name, result.Name);
        Assert.NotNull(result.Rooms);
        Assert.Equal(rooms.Count, result.Rooms.Count());
        Assert.Equal(rooms.Select(x => x.Id), result.Rooms.Select(x => x.Id));
        Assert.Equal(rooms.Select(x
            => x.HotelId), result.Rooms.Select(x => x.HotelId));
    }

    [Fact]
    public async Task HotelExistsAsync_ReturnsTrue_WhenHotelExists()
    {
        // Arrange
        var hotel = new Hotel { 
            Id = 1, 
            Name = "Hotel A", 
            Address = "123 Fake Street", 
            Country = "Scotland", 
            Email = "hotelb@gmail.com", 
            PhoneNumber = "07317893721",
            Website = "www.hotel.com"
        };

        using var context = new HotelContext(_options);
        await context.Hotels.AddAsync(hotel);
        await context.SaveChangesAsync();
        
        // Act
        var result = await _repository.HotelExistsAsync(hotel.Id);

        // Assert
        Assert.True(result);
    }

    [Fact]
    public async Task HotelExistsAsync_ReturnsFalse_WhenHotelDoesNotExist()
    {
        // Arrange
        var hotel = new Hotel { 
            Id = 1, 
            Name = "Hotel A", 
            Address = "123 Fake Street", 
            Country = "Scotland", 
            Email = "hotelb@gmail.com", 
            PhoneNumber = "07317893721",
            Website = "www.hotel.com"
        };

        using (var context = new HotelContext(_options))
        {
            await context.Hotels.AddAsync(hotel);
            await context.SaveChangesAsync();
        }

        // Act
        var result = await _repository.HotelExistsAsync(hotel.Id + 1);

        // Assert
        Assert.False(result);
    }

    [Fact]
    public async Task AddHotelAsync_AddsNewHotel()
    {
        // Arrange
        var hotel = new Hotel { 
            Id = 1, 
            Name = "Hotel A", 
            Address = "123 Fake Street", 
            Country = "Scotland", 
            Email = "hotelb@gmail.com", 
            PhoneNumber = "07317893721",
            Website = "www.hotel.com",
        };

        // Act
        await _repository.AddHotelAsync(hotel);
        await _repository.SaveChangesAsync();

        // Assert
        using (var context = new HotelContext(_options))
        {
            Assert.Equal(1, await context.Hotels.CountAsync());
            Assert.Equal(hotel.Id, await context.Hotels.Select(x => x.Id).FirstOrDefaultAsync());
            Assert.Equal(hotel.Name, await context.Hotels.Select(x => x.Name).FirstOrDefaultAsync());
        }
    }

    [Fact]
    public async Task DeleteHotel_DeletesExistingHotel()
    {
        // Arrange
        var hotel = new Hotel { 
            Id = 1, 
            Name = "Hotel A", 
            Address = "123 Fake Street", 
            Country = "Scotland", 
            Email = "hotelb@gmail.com", 
            PhoneNumber = "07317893721",
            Website = "www.hotel.com"
        };

        using (var context = new HotelContext(_options))
        {
            await context.Hotels.AddAsync(hotel);
            await context.SaveChangesAsync();
        }

        // Act
        _repository.DeleteHotel(hotel);
        await _repository.SaveChangesAsync();

        // Assert
        using (var context = new HotelContext(_options))
        {
            Assert.Equal(0, await context.Hotels.CountAsync());
        }
    }

    [Fact]
    public async Task GetRoomsForHotelAsync_ReturnsAllRoomsForHotel()
    {
        // Arrange
        var hotel = new Hotel { 
            Id = 1, 
            Name = "Hotel A", 
            Address = "123 Fake Street", 
            Country = "Scotland", 
            Email = "hotelb@gmail.com", 
            PhoneNumber = "07317893721",
            Website = "www.hotel.com"
        };
        var rooms = new List<Room>
        {
            new Room { Id = 1, HotelId = hotel.Id, Capacity = 4, PricePerNight = 80.00m},
            new Room { Id = 2, HotelId = hotel.Id, Capacity = 5, PricePerNight = 90.00m}
        };

        await using var context = new HotelContext(_options);
        await context.Hotels.AddAsync(hotel);
        await context.Rooms.AddRangeAsync(rooms);
        await context.SaveChangesAsync();
        

        // Act
        var result = await _repository.GetRoomsForHotelAsync(hotel.Id);

        // Assert
        Assert.Equal(rooms.Count, result.Count());
        Assert.Equal(rooms.Select(x => x.Id), result.Select(x => x.Id));
        Assert.Equal(rooms.Select(x => x.HotelId), result.Select(x => x.HotelId));
    }

    [Fact]
    public async Task GetRoomAsync_ReturnsRoomById()
    {
        // Arrange

        var hotel = new Hotel { 
            Id = 1, 
            Name = "Hotel A", 
            Address = "123 Fake Street", 
            Country = "Scotland", 
            Email = "hotelb@gmail.com", 
            PhoneNumber = "07317893721",
            Website = "www.hotel.com"
        };
        var rooms = new List<Room>
        {
            new Room { Id = 1, HotelId = hotel.Id, Capacity = 4, PricePerNight = 80.00m},
            new Room { Id = 2, HotelId = hotel.Id, Capacity = 5, PricePerNight = 90.00m}
        };

        using (var context = new HotelContext(_options))
        {
            await context.Hotels.AddAsync(hotel);
            await context.Rooms.AddRangeAsync(rooms);
            await context.SaveChangesAsync();
        }

        // Act
        var result = await _repository.GetRoomAsync(hotel.Id, rooms[0].Id);

        // Assert
        Assert.NotNull(result);
        Assert.Equal(rooms[0].Id, result.Id);
        Assert.Equal(rooms[0].HotelId, result.HotelId);
    }

    [Fact]
    public async Task GetRoomAsync_ReturnsNull_WhenRoomDoesNotExist()
    {
        // Arrange
        var hotel = new Hotel { 
            Id = 1, 
            Name = "Hotel A", 
            Address = "123 Fake Street", 
            Country = "Scotland", 
            Email = "hotelb@gmail.com", 
            PhoneNumber = "07317893721",
            Website = "www.hotel.com"
        };

        using (var context = new HotelContext(_options))
        {
            await context.Hotels.AddAsync(hotel);
            await context.SaveChangesAsync();
        }

        // Act
        var result = await _repository.GetRoomAsync(hotel.Id, 99);

        // Assert
        Assert.Null(result);
    }

    [Fact]
    public async Task AddRoomAsync_AddsNewRoomToHotel()
    {
        // Arrange
        var hotel = new Hotel { 
            Id = 1, 
            Name = "Hotel A", 
            Address = "123 Fake Street", 
            Country = "Scotland", 
            Email = "hotelb@gmail.com", 
            PhoneNumber = "07317893721",
            Website = "www.hotel.com"
        };
        var room = new Room { Capacity = 4, PricePerNight = 80.00m};

        using (var context = new HotelContext(_options))
        {
            await context.Hotels.AddAsync(hotel);
            await context.SaveChangesAsync();
        }

        // Act
        await _repository.AddRoomAsync(hotel.Id, room);
        // added save changes to make test pass
        await _repository.SaveChangesAsync();

        // Assert
        using (var context = new HotelContext(_options))
        {
            Assert.Equal(1, await context.Rooms.CountAsync());
            Assert.Equal(room.Id, await context.Rooms.Select(x => x.Id).FirstOrDefaultAsync());
            Assert.Equal(room.HotelId, await context.Rooms.Select(x => x.HotelId).FirstOrDefaultAsync());
        }
    }

    [Fact]
    public async Task DeleteRoom_DeletesExistingRoom()
    {
        // Arrange
        var hotel = new Hotel { 
            Id = 1, 
            Name = "Hotel A", 
            Address = "123 Fake Street", 
            Country = "Scotland", 
            Email = "hotelb@gmail.com", 
            PhoneNumber = "07317893721",
            Website = "www.hotel.com"
        };
        var room = new Room { Id = 1, HotelId = hotel.Id, Capacity = 4, PricePerNight = 80.00m};

        using (var context = new HotelContext(_options))
        {
            await context.Hotels.AddAsync(hotel);
            await context.Rooms.AddAsync(room);
            await context.SaveChangesAsync();
        }

        // Act
        _repository.DeleteRoom(room);
        await _repository.SaveChangesAsync();

        // Assert
        using (var context = new HotelContext(_options))
        {
            Assert.Equal(0, await context.Rooms.CountAsync());
        }
    }
}


